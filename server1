const express = require("express");
const mongoose = require("mongoose");
const cors = require("cors");
const http = require("http");
const { Server } = require("socket.io");

const app = express();
const server = http.createServer(app);
const io = new Server(server, {
  cors: {
    origin: "http://localhost:3000", // Allow requests from your React app
    methods: ["GET", "POST"],
  },
});

app.use(express.json());
app.use(cors());

// Connect to MongoDB
mongoose
  .connect("mongodb://localhost:27017/mediconnect", {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  })
  .then(() => console.log("✅ MongoDB Connected"))
  .catch((err) => console.error("❌ MongoDB Connection Error:", err));

// 🟢 User Schema (For Patients)
const UserSchema = new mongoose.Schema({
  name: String,
  email: String,
  mobile: String,
  password: String, // ⚠️ No Hashing (Not Secure)
});

const User = mongoose.model("User", UserSchema);

// 🟢 Doctor Schema (For Doctors)
const DoctorSchema = new mongoose.Schema({
  doctorId: String, // Unique ID provided by Admin
  name: String,
  specialization: String,
  password: String, // ⚠️ No Hashing (For now, it's plain text)
});

const Doctor = mongoose.model("Doctor", DoctorSchema);

// 🟢 Appointment Schema (For Storing Appointments)
const PackageSchema = new mongoose.Schema({
  name: { type: String, required: true }, // Package name (Bronze, Silver, etc.)
  description: { type: String, required: true }, // Package details
  price: { type: String, required: true }, // Package price ($49, etc.)
});

const AppointmentSchema = new mongoose.Schema({
  doctorId: { type: mongoose.Schema.Types.ObjectId, ref: "Doctor", required: true },
  doctorName: { type: String, required: true },
  specialization: { type: String, required: true },
  name: { type: String, required: true },
  address: { type: String, required: true },
  mobile: { type: String, required: true },
  gender: { type: String, required: true },
  message: { type: String },
  appointmentDate: { type: Date, required: true },
  status: { type: String, default: "Accepted" }, // Default status to Accepted
  package: { type: PackageSchema, required: true }, // Package details as a sub-schema
  createdAt: { type: Date, default: Date.now },
});

const Appointment = mongoose.model("Appointment", AppointmentSchema);

// 🟢 Message Schema (For Storing Chat Messages)
const ChatMessageSchema = new mongoose.Schema({
  sender: { type: String, required: true }, // Sender's name or ID
  receiver: { type: String, required: true }, // Receiver's name or ID
  message: { type: String, required: true }, // The message content
  time: { type: String, required: true }, // Timestamp of the message
});

const ChatMessage = mongoose.model("ChatMessage", ChatMessageSchema);

// 🟢 Message Schema (For Storing Messages & Appointment Details)
const MessageSchema = new mongoose.Schema({
  name: String,
  address: String,
  mobile: String,
  gender: String,
  message: String, // User's message
  status: String,
  appointmentDate: Date,
  createdAt: { type: Date, default: Date.now },
});

const Message = mongoose.model("Message", MessageSchema);


// 🟢 SIGNUP API (For Patients)
app.post("/api/signup", async (req, res) => {
  const { name, email, mobile, password } = req.body;

  const existingUser = await User.findOne({ email });
  if (existingUser) {
    return res.status(400).json({ message: "Email already exists" });
  }

  const newUser = new User({ name, email, mobile, password });
  await newUser.save();

  res.json({ message: "Signup successful" });
});

// 🔵 LOGIN API (For Patients)
app.post("/api/login", async (req, res) => {
  const { email, password } = req.body;

  const user = await User.findOne({ email, password });
  if (!user) {
    return res.status(401).json({ message: "Invalid credentials" });
  }

  res.json({ message: "Login successful", user });
});

// 🔴 ADMIN ADDS DOCTOR API
app.post("/api/admin/add-doctor", async (req, res) => {
  const { doctorId, name, specialization, password } = req.body;

  const existingDoctor = await Doctor.findOne({ doctorId });
  if (existingDoctor) {
    return res.status(400).json({ success: false, message: "Doctor ID already exists" });
  }

  const newDoctor = new Doctor({ doctorId, name, specialization, password });
  await newDoctor.save();

  res.json({ success: true, message: "Doctor added successfully" });
});

// 🔵 DOCTOR LOGIN API (Using Doctor ID)
app.post("/api/doctor-login", async (req, res) => {
  const { doctorId, password } = req.body;

  const doctor = await Doctor.findOne({ doctorId, password });
  if (!doctor) {
    return res.status(401).json({ success: false, message: "Invalid Doctor ID or Password" });
  }

  res.json({ success: true, message: "Login successful", doctor });
});

// 🔵 FETCH ALL DOCTORS API
app.get("/api/doctors", async (req, res) => {
  try {
    const doctors = await Doctor.find(); // Fetch all doctors from DB
    res.json(doctors);
  } catch (error) {
    res.status(500).json({ message: "Error fetching doctors" });
  }
});

// 🔵 FETCH APPOINTMENTS BASED ON SPECIALIZATION
app.get("/api/appointments", async (req, res) => {
  try {
    const { specialization, packageName } = req.query; // Get both specialization and package from frontend

    if (!specialization || !packageName) {
      return res.status(400).json({ message: "Specialization and package are required" });
    }

    // Query the database with both filters
    const appointments = await Appointment.find({
      specialization,
      "package.name": packageName, // Match the package name inside the embedded object
    });

    if (appointments.length === 0) {
      return res.status(404).json({ message: "No appointments found for this specialization and package" });
    }

    res.json(appointments);
  } catch (error) {
    console.error("Error fetching appointments:", error);
    res.status(500).json({ message: "Error fetching appointments", error });
  }
});

// 🟠 BOOK APPOINTMENT API (Stores Appointment in MongoDB)
app.post("/api/appointments", async (req, res) => {
  try {
    const { doctorId, doctorName, specialization, name, address, mobile, gender, message, appointmentDate, package } = req.body;

    if (!doctorId || !name || !mobile || !appointmentDate || !package) {
      return res.status(400).json({ message: "Missing required fields" });
    }

    const newAppointment = new Appointment({
      doctorId,
      doctorName,
      specialization,
      name,
      address,
      mobile,
      gender,
      message,
      appointmentDate,
      package: {
        name: package.name,
        description: package.description,
        price: package.price,
      },
    });

    await newAppointment.save();
    res.status(201).json({ message: "Appointment booked successfully", appointment: newAppointment });
  } catch (error) {
    console.error("Error booking appointment:", error);
    res.status(500).json({ message: "Error booking appointment", error: error.message });
  }
});
// 🟢 FETCH ALL MESSAGES API
app.get("/api/messages", async (req, res) => {
  try {
    const { name } = req.query;
    
    if (!name) {
      return res.status(400).json({ message: "Name is required" });
    }
    const messages = await Message.find({ name : name });
    res.json(messages);
  } catch (error) {
    res.status(500).json({ message: "Error fetching messages", error });
  }
  
});
app.get("/api/messages/count", async (req, res) => {
  try {
    const { name } = req.query; // Fetch by name instead of email

    if (!name) {
      return res.status(400).json({ message: "Name is required" });
    }

    const count = await Message.countDocuments({ name }); // Query by name
    
    res.json({ count });
  } catch (error) {
    console.error("Error fetching message count:", error);
    res.status(500).json({ message: "Error fetching message count", error });
  }
});



app.get("/api/messages", async (req, res) => {
  try {
    const { email } = req.query;
    if (!email) {
      return res.status(400).json({ message: "Email is required" });
    }

    const messages = await Message.find({ email }).sort({ createdAt: -1 }).limit(10);
    res.json(messages);
  } catch (error) {
    res.status(500).json({ message: "Error fetching messages", error });
  }
});


app.get("/api/messages", async (req, res) => {
  try {
    const messages = await Message.find().sort({ createdAt: -1 }); // Fetch latest first
    res.json(messages);
  } catch (error) {
    res.status(500).json({ message: "Error fetching messages", error });
  }
});

// ✅ Fetch Doctor by ID (GET)
app.get("/api/doctors/:doctorId", async (req, res) => {
  try {
    const doctor = await Doctor.findOne({ doctorId: req.params.doctorId });
    if (!doctor) {
      return res.status(404).json({ message: "Doctor not found" });
    }
    res.json(doctor);
  } catch (error) {
    res.status(500).json({ message: "Error fetching doctor" });
  }
});

// ✅ Update Doctor (PUT)
app.put("/api/doctors/update", async (req, res) => {
  try {
    const { doctorId, name, specialization, password } = req.body;

    const updatedDoctor = await Doctor.findOneAndUpdate(
      { doctorId },
      { name, specialization, password },
      { new: true, upsert: true } // upsert: true -> creates a new doctor if not found
    );

    res.json({ success: true, message: "Doctor updated successfully", updatedDoctor });
  } catch (error) {
    res.status(500).json({ message: "Error updating doctor" });
  }
});


// 🔵 FETCH ALL APPOINTMENTS API
app.get("/api/appointments", async (req, res) => {
  try {
    const appointments = await Appointment.find();
    res.json(appointments);
  } catch (error) {
    res.status(500).json({ message: "Error fetching appointments" });
  }
});

// 🔵 FETCH APPOINTMENT DETAILS BY MOBILE
app.get("/api/appointments/mobile/:mobile", async (req, res) => {
  try {
    const appointment = await Appointment.findOne({ mobile: req.params.mobile });
    if (!appointment) return res.status(404).json({ message: "Appointment not found" });

    res.json(appointment);
  } catch (error) {
    res.status(500).json({ message: "Error fetching appointment details", error });
  }
});

// 🟢 UPDATE APPOINTMENT STATUS API
app.put("/api/appointments/:id", async (req, res) => {
  try {
    const { status } = req.body;
    const updatedAppointment = await Appointment.findByIdAndUpdate(req.params.id, { status }, { new: true });

    if (!updatedAppointment) {
      return res.status(404).json({ message: "Appointment not found" });
    }

    res.json({ message: "Status updated successfully", updatedAppointment });
  } catch (error) {
    res.status(500).json({ message: "Error updating status", error });
  }
});

// 🟢 STORE CHAT MESSAGES IN A SEPARATE COLLECTION
app.post("/api/chat-messages", async (req, res) => {
  try {
    const { sender, receiver, message, time } = req.body;

    const newChatMessage = new ChatMessage({ sender, receiver, message, time });
    await newChatMessage.save();

    res.status(201).json({ success: true, message: "Chat message stored successfully" });
  } catch (error) {
    console.error("Error storing chat message:", error);
    res.status(500).json({ success: false, error: "Internal Server Error" });
  }
});



// 🟢 FETCH CHAT MESSAGES BETWEEN TWO USERS
app.get("/api/chat-messages", async (req, res) => {
  try {
    const { sender, receiver } = req.query;

    if (!sender || !receiver) {
      return res.status(400).json({ message: "Sender and receiver are required" });
    }

    const messages = await ChatMessage.find({
      $or: [
        { sender, receiver },
        { sender: receiver, receiver: sender },
      ],
    }).sort({ time: 1 }); // Sort by time in ascending order

    res.json(messages);
  } catch (error) {
    res.status(500).json({ message: "Error fetching chat messages", error });
  }
});

// 🟢 Socket.IO Connection for Real-Time Chat
io.on("connection", (socket) => {
  console.log("A user connected:", socket.id);

  // Listen for incoming chat messages
  socket.on("send_message", (data) => {
    // Broadcast the message to the receiver
    io.emit("receive_message", data);

    // Save the message to the database
    const { sender, receiver, message, time } = data;
    const newChatMessage = new ChatMessage({ sender, receiver, message, time });
    newChatMessage.save();
  });

  // Handle disconnection
  socket.on("disconnect", () => {
    console.log("A user disconnected:", socket.id);
  });
});

// 🟢 Start Server
server.listen(5000, () => {
  console.log("🚀 Server running on port 5000");
});
